f <- as.formula(paste( "cbind(", paste(colnames(cc$data) ,collapse = ","), ")~1"))
mdls <- initFlexmix(f, k = nClust,
concomitant = concom,
data = as.data.frame(cc$data),
model = mcmixed(continuous = cc$con.len,
ordinal = cc$ord.len,
nominal = cc$nom.len,
count.poi = cc$count.len,
ppdim = cc$ppdim[1:cc$nom.len],
diagonal = diagonal))
mdls <- initFlexmix(f, k = nClust,
concomitant = concom,
data = data.frame(cc$data, cc$covariates),
model = mcmixed(continuous = cc$con.len,
ordinal = cc$ord.len,
nominal = cc$nom.len,
count.poi = cc$count.len,
ppdim = cc$ppdim[1:cc$nom.len],
diagonal = diagonal))
which(colnames(Cars934) == "Type")
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
which(colnames(Cars934) == "Ty")
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
shiny::runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
x
Cars934 <- Cars93[,c(3,5,8,10)]
x <- Cars934
continuous = 2:#
continuous = 2:3
nominal = c(!,4)
nominal = c(1,4)
ordinal = NULL
count = NULL
order = NULL
nClust = 2:5
concomitant = NULL
diagonal = TRUE)
diagonal = TRUE
cc <- data.recode(x, continuous = continuous, ordinal = ordinal, nominal = nominal,
count = count, order = order, concomitant = concomitant)
if(!is.null(concomitant)){
fc <- as.formula(paste("~", paste(names(x)[concomitant], collapse = "+")))
concom <- FLXPmultinom(fc)
}else{
concom = NULL
}
f <- as.formula(paste( "cbind(", paste(colnames(cc$data) ,collapse = ","), ")~1"))
mdls <- initFlexmix(f, k = nClust,
concomitant = concom,
data = data.frame(cc$data, cc$covariates),
model = mcmixed(continuous = cc$con.len,
ordinal = cc$ord.len,
nominal = cc$nom.len,
count.poi = cc$count.len,
ppdim = cc$ppdim[1:cc$nom.len],
diagonal = diagonal))
f
concom
mdls <- initFlexmix(f, k = nClust,
concomitant = concom,
data = data.frame(cc$data, cc$covariates),
model = mcmixed(continuous = cc$con.len,
ordinal = cc$ord.len,
nominal = cc$nom.len,
count.poi = cc$count.len,
ppdim = cc$ppdim[1:cc$nom.len],
diagonal = diagonal))
data.frame(cc$data, cc$covariates)
cc$covariates
if(!is.null(concomitant)){
fc <- as.formula(paste("~", paste(names(x)[concomitant], collapse = "+")))
concom <- FLXPmultinom(fc)
data <- data.frame(cc$data, cc$covariates)
}else{
concom = NULL
data <- as.data.frame(cc$data)
}
f <- as.formula(paste( "cbind(", paste(colnames(cc$data) ,collapse = ","), ")~1"))
mdls <- initFlexmix(f, k = nClust,
concomitant = concom,
data = data,
model = mcmixed(continuous = cc$con.len,
ordinal = cc$ord.len,
nominal = cc$nom.len,
count.poi = cc$count.len,
ppdim = cc$ppdim[1:cc$nom.len],
diagonal = diagonal))
library(fmclust)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
?Mclust
Mclust(dataPre(), G = input$nCluster[1]:input$nCluster[2])
Mclust(data, G = input$nCluster[1]:input$nCluster[2])
data
Mclust(data, G = 2:5)
obj <- Mclust(data, G = 2:5)
obj$loglik
obj$n
mcSummary <- function(obj){
d <- data.frame(logLik = obj$loglik,
Npar = obj$df,
BIC = obj$bic)
d
}
obj$loglik
mcSummary(obj)
mclust.mdls <- function(data, nClust = 2:5){
# models
L <- list()
L$mdls <- list()
for(i in 1:length(nClust)){
L$mdls[[i]] <- Mclust(data, G = nClust[i])
}
L$nClust <- nClust
L$summary <- do.call(rbind.data.frame, lapply(L$mdls, mcSummary))
rownames(L$summary) <- nClust
return(L)
}
mclust.mdls(data)
mc <-mclust.mdls(data)
mc
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
mclustBIC
mclustBIC(data)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
mclustBIC(data)
d <- mclustBIC(data)
d$summat
d
class(d)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
d <- mclustBIC(data)
?mclustBIC
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
data
mclustBIC(data)
mclustBIC(Cars934)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
as.numeric(Cars934)
numeric(Cars934)
class(Cars934)
appl
apply(Cars934,2,as.numeric)
apply(Cars934,2,as.factor)
apply(Cars934,2,factor)
apply(Cars934,2,function(x) levels(as.factor()))
apply(Cars934,2,function(x) levels(as.factor(x)))
apply(Cars934,2,function(x) as.numeric(as.factor(x)))
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
aBIC
BIC
BIC = mclustBIC(data)
summary(BIC)
BIC
BIC$best
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
BIC
BIC[[1]]
BIC[1]
summary.mclustBIC(BIC)
summary(BIC)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
summary(BIC)[1:10]
summary(BIC)[1:3,]
summary(BIC)
summary(BIC)[[2]]
summary(BIC)[[2]][2]
summary(BIC)[,2]
summary(BIC)[[1]]
BIC
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
as.data.frame(summary(BIC))
s <- summary(BIC)
data.frame(s)
unlist(s)
class(unlist(s))
dim(s)
as.numeric(s)
names(s)
rbind(names(s),s)
rbind(s)
t <- rbins(s)
t <- rbind(s)
class(t)
as.matrix(s)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
?plotOutput
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
rbind("BIC"= summary(BIC))
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
data
BIC
Mclust(data, x= BIC)
mm <- Mclust(data, BIC)
mm <- Mclust(data, x=BIC)
plot(mm, what = "classification")
apply(dataPre(), 2, function(x) as.numeric(as.factor(x)))  # might have a better way to define !
d <- apply(Cars934, 2, function(x) as.numeric(as.factor(x)))  # might have a better way to define !
head(D)
head(d)
res <- mclustBIC(mcdata(), G = input$nCluster[1]:input$nCluster[2])
res <- mclustBIC(d, G = 2:5)
res
plot(res)
Mclust(d, x= res)
m <- Mclust(d, x= res)
plot(m, what = "classification")
plot(m)
plot(mm, what = "classification")
mm
m
m <- Mclust(d)
plot(m)
class(data)
class(d)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
d <- as.data.frame(d)
class(d)
res <- mclustBIC(d,G=2:5)
plot(res)
m1 <- Mclust(d)
plot(m1)
is.na(D)
is.na(d)
sum(is.na(d))
D
d
data
d
as.data.frame(apply(dataPre(), 2, function(x) as.numeric(as.factor(x))))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) as.numeric(as.factor(x))))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) as.numeric(x)))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) if(is.numeric(x))))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) if(!is.numeric(x)){as.numeric(as.factor(x))}))   # might have a better way to define !
is.numeric(Cars934[,2])
apply(Cars934,2,is.numeric)
apply(Cars934,2,class)
apply(Cars93,2,class)
as.data.frame(apply(Cars934, 2, function(x) if(is.na(as.numeric(x))){as.numeric(as.factor(x))}))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) if(any(is.na(as.numeric(x)))){as.numeric(as.factor(x))}))   # might have a better way to define !
as.data.frame(apply(Cars934, 2, function(x) if(any(is.na(as.numeric(x)))){as.numeric(as.factor(x))}))
any(is.na(as.numeric(x)))
any(is.na(as.numeric(Cars934)))
as.numeric(Cars934)
as.numeric(Cars934[,2])
apply(Cars934,2, as.numeric)
is.na(apply(Cars934,2, as.numeric))
any(is.na(apply(Cars934,2, as.numeric)))
as.data.frame(apply(Cars934, 2, function(x) if(any(is.na(as.numeric(x)))){as.numeric(as.factor(x))}))
apply(Cars934, 2, function(x) if(any(is.na(as.numeric(x)))){as.numeric(as.factor(x))})
transfer <- function(x){
if(any(is.na(as.numeric(x)))){
as.numeric(as.factor(x))
}
}
as.data.frame(apply(Cars934, 2, transfer)
)
apply(Cars934, 2, transfer)
as.numeric(x)
transfer <- function(x){
if(any(is.na(as.numeric(x)))){
return(as.numeric(as.factor(x)))
}else{
return(as.numeric(x))
}
}
apply(Cars934, 2, transfer)
as.data.frame(apply(Cars934, 2, transfer))
as.data.frame(apply(Cars934, 2, transfer))
transfer <- function(x){
# if(any(is.na(as.numeric(x)))){
#   return(as.numeric(as.factor(x)))
# }else{
#   return(as.numeric(x))
# }
as.numeric(data.frame(x, stringsAsFactors = TRUE))
}
as.data.frame(apply(Cars934, 2, transfer))
as.numeric(data.frame(x, drop = FALSE, stringsAsFactors = TRUE))
x
x <- Cars934[,1]
as.numeric(data.frame(x, drop = FALSE, stringsAsFactors = TRUE))
data.frame(x, drop = FALSE, stringsAsFactors = TRUE)
as.numeric(data.frame(x,stringsAsFactors = TRUE))
data.frame(x,stringsAsFactors = TRUE)
t <- data.frame(x,stringsAsFactors = TRUE)
t
class(t)
class(t[,1])
apply(data.frame(x,stringsAsFactors = TRUE),2,as.numeric)
as.data.frame(apply(Cars934, 2, function(x) as.numeric(as.character(x))))
as.numeric(as.character(x))
as.character(x)
apply(data.frame(x,stringsAsFactors = TRUE),2,function(x) as.numeric(as.character(x)))
as.numeric(as.character(data.frame(x,stringsAsFactors = TRUE) ))
data.frame(x,stringsAsFactors = TRUE)
as.numeric(data.frame(x,stringsAsFactors = TRUE) )
transform(x, class=as.numeric(as.character(x)))
transform(Cars934, class=as.numeric(as.character(Cars934)))
str(Cars934)
as.numeric(as.character(Cars934$Type))
as.numeric(Cars934$Type)
idx <- sapply(Cars934,is.factor)
lapply(Cars934[idx], as.numeric)
lapply(Cars934, as.numeric)
as.data.frame(lapply(Cars934, as.numeric))
as.data.frame(lapply(dataPre(), as.numeric))
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
BIC
summary(BIC)
Mclust(d,x=BIC)
m1 <- Mclust(d,x=BIC)
plot(m1)
m1 <- Mclust(d,x=res)
plot(m1)
res <- mclustBIC(mcdata(), G = input$nCluster[1]:input$nCluster[2])
res <- mclustBIC(mcdata(), G = input$nCluster[1]:input$nCluster[2])
d <- as.data.frame(lapply(dataPre(), as.numeric))
d <- as.data.frame(lapply(Cars934, as.numeric))
d
res <- mclustBIC(mcdata(), G = input$nCluster[1]:input$nCluster[2])
res <- mclustBIC(d, G = 2:5)
res
plot(mcBIC())
plot(res)
m2 <-Mclust(d, x=res)
plot(m2)
res
res$values
pickBIC(x,3)
pickBIC(res,3)
pickBIC(res,4)
pickBIC(res,1)
?pickBIC
s<-summary(res)
s$bic
?parent.frame
res$bis
res$bic
m1$BIC
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
d
d==0
sum(d==0)
sum(d>0)
sum(d<0)
plot(mcmod(), what = "classification")
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
mcmod
m1
m1$BIC
bic
BIC
attr(BIC,"subset")
attr(BIC,"args")
attr(BIC,"controls")
attr(BIC,"control")
attr(BIC,"oneD")
attr(BIC,"n")
attr(BIC,"d")
NextMethod("print")
dimnames(BIC)
as.vector(BIC)
BIC
x=BIC
Glabels <- dimnames(x)[[1]]
modelNames <- dimnames(x)[[2]]
x <- data.frame(as.vector(x), Glabels[as.vector(row(x))],modelNames[as.vector(col(x))])
x
x<- BIC
as.data.frame(x)
x
x <- data.frame(as.vector(x))
x
x <- BIX
x <- BIC
matrix(as.vector(x), nrow = length(Glabels), ncol =length(modelNames))
X
x
modelNames <- dimnames(x)[[2]]
x <- matrix(as.vector(x), nrow = length(Glabels), ncol =length(modelNames))
rownames(x) <- Glabels
colnames(x) <- modelNames
x
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
BIC
BIC【1
BIC[1]
s
s[1]
names(s[1])
names(s[1])[[1]]
split(names(s[1]),",")
split(names(s[1]),by=",")
strsplit(names(s),",")
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
?as.name
as.name(x)
x
a <- as.name(x)
a
a[1]
is.name(x)
is.name(a)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
ma
ma
m1
m1$z
m1$parameters
m1$classification
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
source('~/Desktop/customer segmentation/07.25 Shiny 0.1.0/fmclust/R/mcmixed.R', echo=TRUE)
library(fmclust)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
df <- m1$parameters$mean
df
apply(df,1,max)
dfmin <- apply(df,1,min)
dfmax <- apply(df,1,max)
(df-dfmin)/(dfmax-dfmin)
dfmax <- apply(mcdata(),1,max)
dfmax <- apply(d,1,max)
dfmax
d
dfmax <- apply(mcdata(),2,max)
dfmax <- apply(d,2,max)
dfmax
dfmin <- apply(mcdata(),2,min)
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
poMod
invisible(capture.output(res <- poLCA.mdls(nClust = input$nCluster[1]:input$nCluster[2],
covariate = covariates(),
data = data, nrep = 5)))
res <- poLCA.mdls(nClust = 2:5,
data = data, nrep = 5)
data
res <- poLCA.mdls(nClust = 2:5,
data = data, nrep = 5)
if(!is.null(variableType()$Continuous)){
data[,variableType()$Continuous] <- lapply(data[ , variableType()$Continuous, drop=FALSE],
function(x) factor(cut(x,5)))
}
data <- election[,1:12]
covariate <- election[,17,drop = FALSE]
nClust = 2:5
L <- poLCA.mdls(nClust, data, covariate)
data(election)
data <- election[,1:12]
covariate <- election[,17,drop = FALSE]
nClust = 2:5
L <- poLCA.mdls(nClust, data, covariate)
data
names(data)
names(covariate)
data <- election[,c(1:12,17)]
names(covariate)
names(data)
diff(names(data),names(covariate
))
?diff
setdiff(names(data),names(covariate))
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
L <- poLCA.mdls(nClust, data, covariate)
allRes <- poGetModel(L, "BIC")
allRes$plot
allRes$profile
allRes$probMeans
allRes$predClust
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
m1
m1$classification
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
tem <- strsplit(summary(mcBIC())[[1]],",")
tem <- strsplit(summary(bic)[[1]],",")
tem <- strsplit(summary(BIC)[[1]],",")
BIC
tem <- strsplit(summary(m1)[[1]],",")
tem
tem <- strsplit(summary(BIC)[[1]],",")
L[[1]] <- selectInput("mcmodel","Choose Model:", choices = colnames(mcBICtable()),
summary(BIC)
summary(BIC)[1]
names(summary(BIC)[1])
tem <- strsplit(names(summary(mcBIC())[1]),",")
tem <- strsplit(names(summary(BIC)[1]),",")
tem
tem <- unlist(strsplit(names(summary(BIC)[1]),","))
tem
tem <- unlist(strsplit(names(summary(mcBIC())[1]),","))
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')
runApp('~/Desktop/customer segmentation/07.25 Shiny 0.1.0')

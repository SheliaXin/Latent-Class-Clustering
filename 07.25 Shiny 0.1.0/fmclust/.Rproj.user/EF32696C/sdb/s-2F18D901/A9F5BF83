{
    "collab_server" : "",
    "contents" : "library(flexmix)\nlibrary(ggplot2)\nlibrary(fpc)\nlibrary(MASS)\n\n#####################\n# clustering\n#####################\n\n## 2 discrete (multinomial) + 2 continue ##\nset.seed(112233)\noptions(digits=3)\ndata(Cars93)\nCars934 <- Cars93[,c(3,5,8,10)]\nnames(Cars934) <- names(Cars93)[c(3,5,8,10)]\ncc <- discrete.recode(Cars934, xvarsorted = FALSE, continuous = c(2,3), discrete = c(1,4))\nfcc <- flexmix(cc$data~1,k = 2,\n               model = lcmixed(continuous=2, discrete  = 2, ppdim = c(6,3), diagonal=TRUE))\nsummary(fcc)\npara = parameters(fcc)\npara\nfcc\n\nplot(para[,1], xaxt=\"n\", xlab=\"\",type = \"b\")\nlines(para[,2], type = \"b\",col=\"red\")\naxis(1,at = 1:length(para[,1]), labels=rownames(para))\n\n\nlibrary(\"reshape2\")\nlibrary(plotly)\ndata <- cbind(\"id\"= rownames(para), as.data.frame(para))\ndata_long <- melt(data, id = \"id\")\nggplot(data = data_long,  \n       aes(x = id, y = value, group = variable, col = variable)) +\n  geom_line() +\n  geom_point() +\n  geom_line(data = as.data.frame(data_long[data_long$variable == 'Comp.2',]), size=1) +\n  geom_point(data = as.data.frame(data_long[data_long$variable == 'Comp.2',]), size=2)\nggplotly()\n\nggplot(data=data) +\n  geom_point(data = data_long,  \n             aes(x = id, y = value, group = variable, col=variable)) +\n  #geom_line()\n\n\n\ntemp <- data.frame(temperature = c(32,33,43,37), \n                   place = paste(\"Place\", 1:4))\n# Create a scatterplot, with an hidden x axis\nplot(temp$temperature, pch=20, ylim=c(0, 50), \n     xaxt=\"n\", xlab=\"Place\", ylab=\"Temperature\")\n# Plot the axis separately\naxis(1, at=1:4, labels=temp$place)\n\n### or ### \nlibrary(fpc)\nfr <- flexmixedruns(cc$data,\n                    continuous=2,discrete=2,simruns=2,n.cluster=2:3,allout=FALSE)\nprint(fr$optimalk)\nprint(fr$optsummary)\nprint(fr$flexout@cluster)\nprint(fr$flexout@components)\n\n\n\n## 1 normal + 1 binomial ##\nx1 <- cbind(rnorm(300),\n            sample(0:1, 300, replace = TRUE, prob = c(0.25, 0.75)))\nx2 <- cbind(rnorm(300, mean = 2, sd = 0.5),\n            sample(0:1, 300, replace = TRUE, prob = c(0.75, 0.25)))\nx <- rbind(x1, x2)\nf1 <- flexmix(x ~ 1, k = 2, model = FLXMCmvcombi())\nparameters(f1)\ntable(clusters(f1), rep(1:2, c(300,300)))\nx <- cbind(x, rnorm(600)) # add a noise\nf2 <- flexmix(x ~ 1, k = 2, model = FLXMCmvcombi())\nparameters(f2)\ntable(clusters(f2), rep(1:2, c(300,300)))\n\n\n\n## 2d normal with/without local dependence ##\nlibrary(ellipse)\ndata(\"Nclus\", package = \"flexmix\")\neqscplot(Nclus)\nex1 <- flexmix(Nclus ~ 1, k = 4, model = FLXMCmvnorm()) # assume local independence\nprint(ex1)\nplotEll(ex1, Nclus)\nex2 <- flexmix(Nclus ~ 1, k = 6, model = FLXMCmvnorm(diagonal = FALSE)) # with local dependence, full, \nprint(ex2)\nplotEll(ex2, Nclus)\nparameters(ex2, component = 1) # Get parameters of first component\nok <- sample(1:nrow(Nclus), 10) # Have a look at the posterior probabilies of 10 random observations\np <- posterior(ex2)[ok, ]\nmax.col(p)          # The following two should be the same\nclusters(ex2)[ok]\nplot(density(Nclus[, 1]))  # Now try the univariate case\nex3 <- flexmix(Nclus[, 1] ~ 1, cluster = cut(Nclus[, 1], 3),\n               model = FLXMCnorm1())\nex3\nparameters(ex3)\n\n\n\n###########################\ndata(\"NPreg\", package = \"flexmix\")\nplot(NPreg$x, NPreg$yn,col = NPreg$class)\nplot(NPreg$yn, NPreg$yp, col = NPreg$class)\n\nex1 <- flexmix(yn ~ 1, data = NPreg, k = 2,\n               control = list(verb = 5, iter = 100))\n\nex1\nparameters(ex1)\ntable(NPreg$class, clusters(ex1))\nsummary(ex1)\nplot(ex1)\nplot(NPreg$x, NPreg$yn, col = ex1@cluster)\nplot(NPreg$yn, NPreg$yp, col = ex1@cluster)\n\n## test for significance of regression coefficients\nrex1 <- refit(ex1)\nsummary(rex1) \n\n## one Gaussian response and one Poisson\nex2 <- flexmix( ~ 1, data = NPreg, k = 2,\n               model = list(FLXMRglm(yn ~ .), \n                            FLXMRglm(yp ~ ., family = \"poisson\")))\nplot(ex2)\n\nex2\ntable(ex2@cluster, NPreg$class)\nplot(NPreg$x, NPreg$yn,col = ex2@cluster)\nplot(NPreg$yn, NPreg$yp, col = ex2@cluster)\n\n## fitting a model only to the Poisson response is of course\nex3 <- flexmix(yp ~ 1, data = NPreg, k = 2,\n               model = FLXMRglm(family = \"poisson\"))\nsummary(ex3)\nplot(ex3)\ntable(ex3@cluster, NPreg$class)\nplot(NPreg$x, NPreg$yn,col = ex3@cluster)\nplot(NPreg$yn, NPreg$yp, col = ex3@cluster)\n\n## if observations are grouped, i.e., we have several observations per\n## individual, fitting is usually much faster:\nex4 <- flexmix( ~1|id2, data = NPreg, k = 2,\n               model = list(FLXMRglm(yn ~ .), \n                            FLXMRglm(yp ~ ., family = \"poisson\")))\nex4\nsummary(ex4)\ntable(ex4@cluster, NPreg$class)\nplot(NPreg$x, NPreg$yn,col = ex4@cluster)\nplot(NPreg$yn, NPreg$yp, col = ex4@cluster)\n\n\nex5 <- initFlexmix( ~ 1 | id2, data = NPreg, k = 2,\n                   model = list(FLXMRglm(yn ~ .), \n                                FLXMRglm(yp ~ ., family = \"poisson\"),\n                                FLXMRglm(cbind(yb, 1 - yb)~ ., family = \"binomial\")),\n                   nrep = 5)\ntable(NPreg$class, clusters(ex5))\nplot(NPreg$x, NPreg$yn,col = ex5@cluster)\nplot(NPreg$yn, NPreg$yp, col = ex5@cluster)\n\n# boostrap\ndata(\"NPreg\", package = \"flexmix\")\nfitted <- initFlexmix(yn ~ 1 | id2, data = NPreg, k = 2)\nlrtest <- LR_test(fitted, alternative = \"greater\", R = 20,\n                  verbose = 1)\nlrtest\n\n\n\n####\ndata(\"dmft\", package = \"flexmix\")\ndmft_flx <- initFlexmix(End ~ 1, data = dmft, k = 2,\n                        model = FLXMRglmfix(family = \"poisson\",\n                                            fixed = ~ Gender + Ethnic + Treatment))\ndmft_flx\nhead(dmft)\n\n\n## with concomitant (multinomial)\nset.seed(2807)\ndata(\"NregFix\", package = \"flexmix\")\nModel <- FLXMRglm(~ x2 + x1)\nfittedModel <- stepFlexmix(y ~ 1, model = Model, nrep = 3, k = 3,\n                          data = NregFix, concomitant = FLXPmultinom(~ w))\n\nsummary(fittedModel)\nparameters(fittedModel)\nfittedModel <- relabel(fittedModel, \"model\", \"x1\")\nsummary(refit(fittedModel))\n\nModel2 <- FLXMRglmfix(fixed = ~ x2, nested = list(k = c(1, 2),\n                       formula = c(~ 0, ~ x1)), varFix = TRUE)\nfittedModel2 <- flexmix(y ~ 1, model = Model2,\n                        cluster = posterior(fittedModel), data = NregFix,\n                        concomitant = FLXPmultinom(~ w))\nBIC(fittedModel)\nBIC(fittedModel2)\nsummary(refit(fittedModel2))\npar(mfrow = c(2,2))\nplot(NregFix$x1, NregFix$y, col = NregFix$class)\nplot(NregFix$x1, NregFix$y, col = fittedModel@cluster)\nplot(NregFix$x1, NregFix$y, col = fittedModel2@cluster)\n\n\n## clustering try\nhist(NregFix$y)\nModel_c <- FLXMCmvnorm(diagonal = FALSE)\nfittedModel_c <- stepFlexmix(x1+y ~ 1, model = Model_c, nrep = 5, k = 3,\n                           data = NregFix, concomitant = FLXPmultinom(~ w))\nsummary(fittedModel_c)\nparameters(fittedModel_c)\npar(mfrow = c(2,2))\nplot(NregFix$x1, NregFix$y, col = NregFix$class)\nplot(NregFix$x1, NregFix$y, col = fittedModel_c@cluster)\n\n# fixed effect, betablocker\ndata(\"betablocker\", package = \"flexmix\")\nhead(betablocker)\nbetaMix <- initFlexmix(cbind(Deaths, Total - Deaths) ~ 1 | Center,\n                       data = betablocker, k = 3, nrep = 5,\n                       model = FLXMRglmfix(family = \"binomial\",\n                                           fixed = ~Treatment))\nbetaMix <- flexmix(cbind(Deaths, Total - Deaths) ~ 1,\n                       data = betablocker, k = 3, \n                       model = FLXMRglmfix(family = \"binomial\",\n                                           fixed = ~Treatment),\n                   concomitant = FLXPmultinom(~ Treatment) )\nparameters(betaMix)\nsummary(betaMix)\nplot(betablocker$Deaths, betablocker$Total- betablocker$Deaths,col= betablocker$Treatment, pch = betablocker$Center)\nplot(betablocker$Deaths, betablocker$Total- betablocker$Deaths,col = betaMix@cluster)\n\n\n#########\n\ndata(\"dmft\", package = \"flexmix\")\ndmft_flx <- initFlexmix(End ~ 1, data = dmft, k = 2:3,\n                        model = FLXMRglmfix(family = \"poisson\",\n                                            fixed = ~ Gender + Ethnic + Treatment))\nunique(dmft_flx)\n\nd <- capture.output(dmft_flx)\ndd <- tail(d, 3)\ntt <- strsplit(dd,\"\\\\s+\")\n\nt <- do.call(rbind, lapply(seq_along(tt), function(i){tt[[i]]}))\ncolnames(t) <- t[1,]\nt <- t[-1,]\nxtable(t)\n\n\n\nparameters(dmft_flx[1])\nplot(dmft$Begin,dmft$End,col=dmft$Ethnic)\nplot(dmft$Begin,dmft$End,col=dmft_flx@cluster)\n\n############\n\n\n\n\n\n## random effect \ndata(\"salmonellaTA98\", package = \"flexmix\")\nsalmonMix <- initFlexmix(y ~ 1,\n                         data = salmonellaTA98,\n                         model = FLXMRglmfix(family = \"poisson\",\n                                             fixed = ~ x + log(x + 10)),\n                         k = 2, nrep = 5)\nsalmonMix.pr <- predict(salmonMix, newdata = salmonellaTA98)\nplot(y ~ x, data = salmonellaTA98,\n     pch = as.character(clusters(salmonMix)),\n     ylim = range(c(salmonellaTA98$y, unlist(salmonMix.pr))))\nfor (i in 1:2) lines(salmonellaTA98$x, salmonMix.pr[[i]], lty = i)\n\n###########\n# mixture Poisson\n\ndata(\"fabricfault\", package = \"flexmix\")\nfabricMix <- stepFlexmix(Faults ~ 1, model = FLXMRglmfix(family=\"poisson\", \n                                                         fixed  = ~ log(Length)), data = fabricfault, \n                         k = 2,  nrep = 3)\nsummary(fabricMix)\nparameters(fabricMix)\n\nsummary(refit(fabricMix))\n\nLnew <- seq(0, 1000, by = 50)\nfabricMix.pred <- predict(fabricMix, newdata = data.frame(Length = Lnew))\n\n## the intercept of the first component is not significantly different from zero\n## for a signficance level of 0.05. Therefore fit a modified model where the intercept \n## is a priori set to zero for first component\n\nfabricMix2 <- flexmix(Faults ~ 0, data = fabricfault,\n                      cluster = posterior(fabricMix),\n                      model = FLXMRglmfix(family = \"poisson\", fixed = ~ log(Length),\n                                          nested = list( k = c(1,1), formula = list(~0,~1))))\nsummary(fabricMix2)\nsummary(refit(fabricMix2))\n\n\n\n\n############\n## simple example in 2d\nbeta <- matrix(c(1, 2, 3, -1), ncol = 2)\nsigma <- c(.5, 1)\ndf1 <- ExLinear(beta, 100, sd = sigma, min = -1, max = 2)\nplot(y~x1, df1, col = attr(df1, \"clusters\"))\n## add a second explanatory variable with exponential distribution\nbeta2 <- rbind(beta, c(-2, 2))\ndf2 <-  ExLinear(beta2, 100, sd = c(.5, 1),\n                 xdist = c(\"runif\", \"rexp\"),\n                 xdist.args = list(list(min = -1, max = 2),\n                                   list(rate = 3)))\nsummary(df2)\nopar = par(\"mfrow\")\npar(mfrow = 1:2)\nhist(df2$x1)\nhist(df2$x2)\npar(opar)\nf1 <- flexmix(y ~ ., data = df2, k = 2)\n## sort components on Intercept\nf1 <- relabel(f1, \"model\", \"Intercept\")\n## the parameters should be close to the true beta and sigma\nround(parameters(f1), 3)\nrbind(beta2, sigma)\n### A simple Poisson GLM\ndf3 <- ExLinear(beta/2, 100, min = -1, max = 2, family = \"poisson\")\nplot(y ~ x1, df3, col = attr(df3, \"clusters\"))\nf3 <- flexmix(y ~ ., data = df3, k = 2,\n              model = FLXMRglm(family = \"poisson\"))\nround(parameters(relabel(f3, \"model\", \"Intercept\")), 3)\nbeta/2\n\n\n\ndata(\"NPreg\", package = \"flexmix\")\nex1 <- flexmix(yn ~ x + I(x^2), data = NPreg, k = 2)\nmatplot(NPreg$x, fitted(ex1), pch = 16, type = \"p\")\npoints(NPreg$x, NPreg$yn)\n\nposterior(ex1)\n",
    "created" : 1470151299213.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "698681714",
    "id" : "A9F5BF83",
    "lastKnownWriteTime" : 1469714796,
    "last_content_update" : 1469714796,
    "path" : "~/Desktop/customer segmentation/Latent-Class-Clustering/flexmix_clust.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}